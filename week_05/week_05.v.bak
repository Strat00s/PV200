
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module week_05(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
	wire	[7:0] NUM1; // left two digits
	wire	[7:0] NUM2;	// middle two digits
	wire	[7:0] NUM3; // right two digits

	wire  clk_div1;   // clock divided by 2^12, approximately 12kHz
	wire  clk_div2;   // clk_div1 divided by 2^11, approximately 6Hz
	wire  pwm;			// pulse widh modulation for brightnes of the display
	
	

//=======================================================
//  Functional coding
//=======================================================

	// **************************************************
	// TASK 1: complete the file segment7.v
	//
	// result before TASK4: display segments 5:2 are off
	// **************************************************

	segment7 digit0 (1,NUM3[3:0],HEX0);
	segment7 digit1 (1,NUM3[7:4],HEX1);
	segment7 digit2 (pwm,NUM2[3:0],HEX2);
	segment7 digit3 (pwm,NUM2[7:4],HEX3);
	segment7 digit4 (pwm,NUM1[3:0],HEX4);
	segment7 digit5 (pwm,NUM1[7:4],HEX5);

	assign NUM1 = {4'b0000,SW[9:6]};
	assign NUM2 = {4'b0000,SW[5:2]};
	assign LEDR[9:1] = SW[9:1];
	assign LEDR[0] = clk_div2;
	

	// **************************************************
	// TASK 2: complete the file up_down_counter.v
	//
	// result: NUM3 is counting press of the KEY2 in direction according KEY1, KEY0 sets NUM3 to 0
	// **************************************************
	
	// test instation for up/down counter
	up_down_counter u1(
		.arst(~KEY[0]),		// KEY0 is used as asynchronous reset
		.direction(KEY[1]),  // KEY1 is used for direction, when it is pressed, counting goes down
		.clk(~KEY[2]),			// clk from KEY2
		//.clk(clk_div2),		// clk from dividers
		.data(NUM3)
		);

	// **************************************************
	// TASK 3: complete the file clk_divider.v
	//
	// result: LEDR0 will flash approximately 6 time per second
	//         you can change clk signal from KEY2 to dividers
	// **************************************************
	
	// the first stage of clock dividing
	clk_divider #(.WIDTH(12)) u2( // parameter owerwriting by name method 
		.clk_in(CLOCK_50),
		.clk_out(clk_div1)
		);

	// the second stage of clock dividing
	defparam u3.WIDTH = 11;  // parameter owerwriting by defparam
	clk_divider u3(
		.clk_in(clk_div1),
		.clk_out(clk_div2)
		);


	// **************************************************
	// TASK 4: complete the file pwm.v
	//
	// result: display segments 5:2 will change brithnes acording to the NUM3
	// **************************************************
	
	// test instantion for PWM module
	pwm u4(
		.clk(clk_div1),
		.duty(NUM3 & 8'h3F), // the mask of lower 6 bits is only for faster changing of brightnes
		.out(pwm)
	);
	
	
endmodule
