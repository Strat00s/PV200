
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module week_07a(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
	wire	[7:0] NUM1; // left two digits
	wire	[7:0] NUM2;	// middle two digits
	wire	[7:0] NUM3; // right two digits
	
	wire [3:0] KEY_PRESSED; // keys filtered by find_rise.v
	
	wire UNLOCK;
	
	

//=======================================================
//  Functional coding
//=======================================================

	segment7 digit0 (UNLOCK,NUM3[3:0],HEX0);
	segment7 digit1 (UNLOCK,NUM3[7:4],HEX1);
	segment7 digit2 (UNLOCK,NUM2[3:0],HEX2);
	segment7 digit3 (UNLOCK,NUM2[7:4],HEX3);
	segment7 digit4 (UNLOCK,NUM1[3:0],HEX4);
	segment7 digit5 (UNLOCK,NUM1[7:4],HEX5);

	assign NUM1 = {4'b0000,SW[9:6]};
	assign NUM2 = {4'b0000,SW[5:2]};
	assign NUM3 = NUM1 + NUM2;

	assign LEDR[9:4] = 0;
	


	find_rise u1(
		.clk(CLOCK_50),
		.in(~KEY[0]),
		.out(KEY_PRESSED[0])
	);

	find_rise u2(
		.clk(CLOCK_50),
		.in(~KEY[1]),
		.out(KEY_PRESSED[1])
	);
	find_rise u3(
		.clk(CLOCK_50),
		.in(~KEY[2]),
		.out(KEY_PRESSED[2])
	);
	find_rise u4(
		.clk(CLOCK_50),
		.in(~KEY[3]),
		.out(KEY_PRESSED[3])
	);
	
	// **************************************************
	// TASK : 
	//   build the module in the file moore_state_machine.v
	// 
	// **************************************************

	   
	moore_state_machine u5(
		.clk(CLOCK_50),
		.reset(SW[0]),
		.keys(KEY_PRESSED),
		.unlock(UNLOCK),
		.progress(LEDR[3:0])
	);

	
endmodule
