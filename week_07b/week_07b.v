
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module week_07b(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
	wire [3:0] KEY_PRESSED; // keys filtered by find_rise.v

	wire [23:0] TIME; // time in the bcd code
	wire PULSE_10ms;  // 10ms tick from timer
	
	wire carry0,carry1,carry2,carry3,carry4;
	
	wire reset, enable, freeze;
	
	
//=======================================================
//  Functional coding
//=======================================================

	segment7 digit0 (1,TIME[ 3: 0],HEX0);
	segment7 digit1 (1,TIME[ 7: 4],HEX1);
	segment7 digit2 (1,TIME[11: 8],HEX2);
	segment7 digit3 (1,TIME[15:12],HEX3);
	segment7 digit4 (1,TIME[19:16],HEX4);
	segment7 digit5 (1,TIME[23:20],HEX5);

	assign LEDR[9:3] = 0;
	
	assign LEDR[0] = reset;
	assign LEDR[1] = enable;
	assign LEDR[2] = freeze;
	

	find_rise u1(
		.clk(CLOCK_50),
		.in(~KEY[0]),
		.out(KEY_PRESSED[0])
	);

	find_rise u2(
		.clk(CLOCK_50),
		.in(~KEY[1]),
		.out(KEY_PRESSED[1])
	);
	find_rise u3(
		.clk(CLOCK_50),
		.in(~KEY[2]),
		.out(KEY_PRESSED[2])
	);
	find_rise u4(
		.clk(CLOCK_50),
		.in(~KEY[3]),
		.out(KEY_PRESSED[3])
	);

   // ***************************************************************
	// TASK 1:
	//    - modify the timer module in the file timer.v
	// ***************************************************************

	
	// timer 10ms (100Hz)
	timer #(.WIDTH(19), .PERIOD(500000)) u5(
		.clk(CLOCK_50),
		.enable(enable),
		.reset(reset),
		.out(PULSE_10ms)
	);

   // ***************************************************************
	// TASK 2:
	//    - build the bcd counter module in the file bcd_counter.v
	//
	//    - test it on board by KEY>
	//          KEY[0] - reset
	//          KEY[1] - not enable
	//          KEY[2] - freeze
	//       
	// ***************************************************************

	bcd_counter u6(
		.clk(CLOCK_50),
		.clken(PULSE_10ms),
		.reset(reset),
		.freeze(freeze),
		.data(TIME[ 3: 0]),
		.carry(carry0)
	);
	
	bcd_counter u7(
		.clk(CLOCK_50),
		.clken(carry0),
		.reset(reset),
		.freeze(freeze),
		.data(TIME[ 7: 4]),
		.carry(carry1)
	);

	bcd_counter u8(
		.clk(CLOCK_50),
		.clken(carry1),
		.reset(reset),
		.freeze(freeze),
		.data(TIME[11: 8]),
		.carry(carry2)
	);

	bcd_counter u9(
		.clk(CLOCK_50),
		.clken(carry2),
		.reset(reset),
		.freeze(freeze),
		.data(TIME[15:12]),
		.carry(carry3)
	);

	bcd_counter u10(
		.clk(CLOCK_50),
		.clken(carry3),
		.reset(reset),
		.freeze(freeze),
		.data(TIME[19:16]),
		.carry(carry4)
	);

	bcd_counter u11(
		.clk(CLOCK_50),
		.clken(carry4),
		.reset(reset),
		.freeze(freeze),
		.data(TIME[23:20])
	);


	// ******************************************************
	// TASK 3: 
	//  build the module in the file moore_state_machine.v
	// 
	// **************************************************

	// temporary connection to the main signals
	// comment this block after TASK2
	
	//assign reset  = ~KEY[0];
	//assign enable = KEY[1];
	//assign freeze = ~KEY[2];
	
	
	// uncomment this block before TASK3
	
	moore_state_machine u12(
		.clk(CLOCK_50),
		.reset(reset),
		.enable(enable),
		.freeze(freeze),
		.keys(KEY_PRESSED)
	);
	
endmodule
